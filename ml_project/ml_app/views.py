import os
import shutil

from django.core.files import File
from django.shortcuts import render
from rest_framework import status, viewsets
from rest_framework.response import Response

from .forms import ImageForm
from .models import Image, PredImage
from .serializers import ImageSerializer, PredImageSerializer
from .utils import image_video_path, predict_yolo_image, upload_image_video


# breakpoint()
def index(request):
    """
    View function for the index page.

    This view function handles both GET and POST requests. For GET requests, it renders
    the index.html template with a form for uploading images/videos and displaying
    existing images and predictions. For POST requests, it processes the form data,
    saves the uploaded image/video, makes predictions using YOLOv8, and saves the
    predictions in the database.

    Args:
    - request: HttpRequest object representing the request.

    Returns:
    - HttpResponse: Rendered template response for the index page.
    """
    all_images = Image.objects.all()
    all_predictions = PredImage.objects.all()

    if request.method == "POST":
        form = ImageForm(request.POST, request.FILES)
        if form.is_valid():
            # image_instance = form.save(commit=False)
            image_instance = form.save()

            # Getting the newest image file present in media/images directory.
            newest_user_image = upload_image_video(dir_name="images")
            image_path = os.path.join("media", "images", newest_user_image)
            predict_yolo_image(image_path)
            newest_directory, newest_file = image_video_path()

            #  Getting the newest video file present in media/images directory.
            newest_user_video = upload_image_video(dir_name="videos")
            video_path = os.path.join("media", "videos", newest_user_video)
            predict_yolo_image(video_path)
            newest_video_directory, newest_video_file = image_video_path()

            pred_image_instance = PredImage(pred_image_id=image_instance)

            # Open the image file and assign it to the pred_image field
            pred_image_path = os.path.join(
                "runs", "detect", newest_directory, newest_file
            )
            with open(pred_image_path, "rb") as pred_image_file:
                pred_image_instance.pred_image.save(
                    os.path.basename(pred_image_path), File(pred_image_file)
                )

            # Open the video file and assign it to the pred_video field
            pred_video_path = os.path.join(
                "runs", "detect", newest_video_directory, newest_video_file
            )
            with open(pred_video_path, "rb") as pred_video_file:
                pred_image_instance.pred_video.save(
                    os.path.basename(pred_video_path), File(pred_video_file)
                )

            # Save the PredImage instance
            pred_image_instance.save()

            # Deleting all the predicted images and videos by YOLO model to save memory.
            shutil.rmtree(path=os.path.join("runs", "detect"))

    else:
        form = ImageForm()

    return render(
        request,
        "ml_app/index.html",
        {"form": form, "all_images": all_images, "all_predictions": all_predictions},
    )


# Markdown reference:- https://www.django-rest-framework.org/topics/documenting-your-api/
# API documentation :- https://daringfireball.net/projects/markdown/basics
class PredImageViewSet(viewsets.ModelViewSet):
    """
    1) **pred_image_id** : Auto-generated based on instance of image.id value. \n
    2) **pred_image** : Predicted Image generated by yolo model. blank=False, null=False, default="Default pred Image" \n
    3) **pred_video** : Predicted Video generated by yolo model. blank=False, null=False, default="Default pred Video" \n
    """

    queryset = PredImage.objects.all()
    serializer_class = PredImageSerializer


# https://www.django-rest-framework.org/api-guide/viewsets/
class ImageViewSet(viewsets.ViewSet):
    """
    1) **id** : Auto-generated after successful valid data submission from either UI page or API end point. primary_key = True \n
    2) **image** : Image from user for image prediction. blank = False, null = False, default="Default Image" \n
    3) **video** : Video from user for video prediction. blank = False, null = False, default="Default Video" \n
    """

    queryset = Image.objects.all()
    serializer_class = ImageSerializer

    def list(self, request):
        """
        List all the image objects present in database to the django restframework API as data.

        Args:
            - request : request object

        Returns:
            - A response containing a list of serialized Image instances.
        """
        images = Image.objects.all()
        serializer = self.serializer_class(images, many=True)
        return Response(serializer.data)

    def create(self, request):
        """
        Create a new image instance after user send request to API.

        Args:
        - request: The request object containing the data for the new Image instance.

        Returns:
        - Response: A response containing the serialized data of PredImage instance only if \
          the data is valid. Else 400 status code with bad request is sended to the end user
        """
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            instance = serializer.save()

            # Perform pre-processing for the image
            newest_user_image = upload_image_video(dir_name="images")
            image_path = os.path.join("media", "images", newest_user_image)
            predict_yolo_image(image_path)
            newest_directory, newest_file = image_video_path()

            #  Getting the newest video file present in media/images directory.
            newest_user_video = upload_image_video(dir_name="videos")
            video_path = os.path.join("media", "videos", newest_user_video)
            predict_yolo_image(video_path)
            newest_video_directory, newest_video_file = image_video_path()

            # Create PredImage instance
            pred_image_instance = PredImage(pred_image_id=instance)

            # Open the image file and assign it to the pred_image field
            pred_image_path = os.path.join(
                "runs", "detect", newest_directory, newest_file
            )
            with open(pred_image_path, "rb") as pred_image_file:
                pred_image_instance.pred_image.save(
                    os.path.basename(pred_image_path), File(pred_image_file)
                )

            # Open the video file and assign it to the pred_video field
            pred_video_path = os.path.join(
                "runs", "detect", newest_video_directory, newest_video_file
            )
            with open(pred_video_path, "rb") as pred_video_file:
                pred_image_instance.pred_video.save(
                    os.path.basename(pred_video_path), File(pred_video_file)
                )

            # Save the PredImage instance
            pred_image_instance.save()

            # Deleting all the predicted images and videos by YOLO model to save memory.
            shutil.rmtree(path=os.path.join("runs", "detect"))

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def retrieve(self, request, pk=None):
        """
        Retrieve a single Image instance by its primary key by default none.

        Args:
        - request: The request object.
        - pk: The primary key of the Image instance to retrieve.

        Returns:
        - Response: A response containing the serialized data of the retrieved Image instance,
                    or a 404 status code if the Image instance does not exist.
        """
        try:
            image = Image.objects.get(pk=pk)
        except Image.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        serializer = self.serializer_class(image)
        return Response(serializer.data)
